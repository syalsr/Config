// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/config.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigWrapperClient is the client API for ConfigWrapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigWrapperClient interface {
	Get(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Data, error)
	Create(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Service, error)
	Delete(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
}

type configWrapperClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigWrapperClient(cc grpc.ClientConnInterface) ConfigWrapperClient {
	return &configWrapperClient{cc}
}

func (c *configWrapperClient) Get(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/proto.ConfigWrapper/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configWrapperClient) Create(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/proto.ConfigWrapper/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configWrapperClient) Delete(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/proto.ConfigWrapper/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigWrapperServer is the server API for ConfigWrapper service.
// All implementations must embed UnimplementedConfigWrapperServer
// for forward compatibility
type ConfigWrapperServer interface {
	Get(context.Context, *Service) (*Data, error)
	Create(context.Context, *Config) (*Service, error)
	Delete(context.Context, *Service) (*Service, error)
	mustEmbedUnimplementedConfigWrapperServer()
}

// UnimplementedConfigWrapperServer must be embedded to have forward compatible implementations.
type UnimplementedConfigWrapperServer struct {
}

func (UnimplementedConfigWrapperServer) Get(context.Context, *Service) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedConfigWrapperServer) Create(context.Context, *Config) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedConfigWrapperServer) Delete(context.Context, *Service) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConfigWrapperServer) mustEmbedUnimplementedConfigWrapperServer() {}

// UnsafeConfigWrapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigWrapperServer will
// result in compilation errors.
type UnsafeConfigWrapperServer interface {
	mustEmbedUnimplementedConfigWrapperServer()
}

func RegisterConfigWrapperServer(s grpc.ServiceRegistrar, srv ConfigWrapperServer) {
	s.RegisterService(&ConfigWrapper_ServiceDesc, srv)
}

func _ConfigWrapper_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigWrapperServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConfigWrapper/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigWrapperServer).Get(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigWrapper_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigWrapperServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConfigWrapper/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigWrapperServer).Create(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigWrapper_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigWrapperServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConfigWrapper/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigWrapperServer).Delete(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigWrapper_ServiceDesc is the grpc.ServiceDesc for ConfigWrapper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigWrapper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ConfigWrapper",
	HandlerType: (*ConfigWrapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ConfigWrapper_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ConfigWrapper_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConfigWrapper_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/config.proto",
}
